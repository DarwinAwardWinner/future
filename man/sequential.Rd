% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sequential.R
\name{sequential}
\alias{eager}
\alias{lazy}
\alias{sequential}
\alias{transparent}
\title{Create a sequential future whose value will be in the current R session}
\usage{
sequential(expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE,
  seed = NULL, globals = TRUE, local = TRUE, earlySignal = FALSE,
  label = NULL, ...)

transparent(expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE,
  seed = NULL, globals = FALSE, local = FALSE, earlySignal = TRUE,
  label = NULL, ...)

eager(expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE,
  seed = NULL, globals = TRUE, local = TRUE, earlySignal = FALSE,
  label = NULL, ...)

lazy(expr, envir = parent.frame(), substitute = TRUE, lazy = TRUE,
  seed = NULL, globals = TRUE, local = TRUE, earlySignal = FALSE,
  label = NULL, ...)
}
\arguments{
\item{expr}{An \R \link[base]{expression} to be evaluated.}

\item{envir}{The \link{environment} from where global
objects should be identified.  Depending on "evaluator",
it may also be the environment in which the expression
is evaluated.}

\item{substitute}{If TRUE, argument \code{expr} is
\code{\link[base]{substitute}()}:ed, otherwise not.}

\item{lazy}{Specifies whether a future should be resolved
lazily or eagerly.  The default is eager evaluation,
except when the \emph{deprecated} \code{plan(lazy)} is set.}

\item{seed}{(optional) A L'Ecuyer-CMRG RNG seed.}

\item{globals}{A logical, a character vector,
or a named list for controlling how globals are handled.
For details, see below section.}

\item{local}{If TRUE, the expression is evaluated such that
all assignments are done to local temporary environment, otherwise
the assignments are done in the calling environment.}

\item{earlySignal}{Specified whether conditions should be signaled
as soon as possible or not.}

\item{label}{An optional character string label attached to the future.}

\item{...}{Additional arguments passed to the "evaluator".}
}
\value{
A \link{SequentialFuture}.
}
\description{
A sequential future is a future that is evaluated sequentially in the
current R session, which very closely resembles how expressions are
evaluated in R itself.  The main difference is that the expression
is evaluated in a local environment.
}
\details{
The preferred way to create a sequential future is not to call these functions
directly, but to register them via \code{\link{plan}(sequential)} such that it
becomes the default mechanism for all futures.  After this
\code{\link{future}()} and \code{\link{\%<-\%}} will evaluate
the expressions using \emph{sequential futures}.
}
\section{Transparent futures}{

Transparent futures are sequential futures configured to emulate how R
evaluates expressions as far as possible.  For instance, errors and
warnings are signaled immediately and assignments are done to the
calling environment (without \code{local()} as default for all other
types of futures).  This makes transparent futures ideal for
troubleshooting, especially when there are errors.
}

\section{Deprecated futures}{

The \code{eager} and the \code{lazy} futures will soon be deprecated and
eventually removed.  The \code{eager} future is replaced by the
\code{sequential} future (and works identically).
The \code{lazy} future needs to be replaced by specifying lazyness when
creating futures, e.g. \code{f <- future({ ... }, lazy = TRUE)} and
\code{v \%<-\% { ... } \%lazy\% TRUE}.  There is no alternative for
\code{plan(lazy)}, because control of lazyness should be in the hands of
the developer and not the end user.
}
\examples{
## Use sequential futures
plan(sequential)

## A global variable
a <- 0

## Create the future
f <- future({
  b <- 3
  c <- 2
  a * b * c
})

## Since 'a' is a global variable in future 'f' which
## is eagerly resolved (default), this global has already
## been resolved / incorporated, and any changes to 'a'
## at this point will _not_ affect the value of 'f'.
a <- 7
print(a)

v <- value(f)
print(v)
stopifnot(v == 0)
}

