% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/eager.R
\name{eager}
\alias{eager}
\title{An eager future represents a future whose value will be resolved immediately}
\usage{
eager(expr, envir = parent.frame(), substitute = TRUE, local = TRUE, ...)
}
\arguments{
\item{expr}{An R \link[base]{expression}.}

\item{envir}{The \link{environment} in which the evaluation
is done (or inherits from if \code{local} is TRUE).}

\item{substitute}{If TRUE, argument \code{expr} is
\code{\link[base]{substitute}()}:ed, otherwise not.}

\item{local}{If TRUE, the expression is evaluated such that
all assignments are done to local temporary environment, otherwise
the assignments are done in the calling environment.}

\item{...}{Not used.}
}
\value{
A \link{EagerFuture}.
}
\description{
A eager future is a future that uses eager evaluation, which means
that its \emph{value is computed and resolved immediately}, which is
how regular expressions are evaluated in R.  This type of future
exists mainly for the purpose of troubleshooting code that fails
with other types of futures.
}
\details{
This function can be registered as the default \link{future} evaluator,
i.e. \code{plan(future)}.
}
\examples{
## A global variable
a <- 0

## Create lazy future
f <- eager({
  b <- 3
  c <- 2
  a * b * c
})

## Since 'a' is a global variable in _eager_ future 'f',
## it already has been resolved, and any changes to 'a'
## at this point will _not_ affect the value of 'f'.
a <- 7
v <- value(f)
print(v)
stopifnot(v == 0)
}

